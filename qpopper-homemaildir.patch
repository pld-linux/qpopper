diff -ur qpopper3.0.2.orig/common/genpath.c qpopper3.0.2/common/genpath.c
--- qpopper3.0.2.orig/common/genpath.c	Wed May 10 00:35:11 2000
+++ qpopper3.0.2/common/genpath.c	Sat May 27 04:13:54 2000
@@ -273,110 +273,108 @@
     struct passwd *pwp;
 
 
-#ifdef HOMEDIRMAIL
-    if ( ( pwp = getpwnam(pszUser) ) == NULL ) {
-        logit ( fTrace, 
-                POP_PRIORITY, 
-                HERE,
-                "Unable to retrieve password entry for user %s", 
-                pszUser);
-        return -1;
+    if (pop_homedirmail) {
+	    if ( ( pwp = getpwnam(pszUser) ) == NULL ) {
+		logit ( fTrace, 
+			POP_PRIORITY, 
+			HERE,
+			"Unable to retrieve password entry for user %s", 
+			pszUser);
+		return -1;
+	    }
+	    strncpy ( pszDrop, pwp->pw_dir, iDropLen );
+	    strncat ( pszDrop, "/",         iDropLen - strlen(pszDrop) );
+	    
+	    switch ( iWhich ) {
+		case GNPH_SPOOL:  /* spool file */
+		    strncat ( pszDrop, pop_homedirmail, iDropLen - strlen(pszDrop) );
+		    break;
+		case GNPH_POP:    /* .pop file  */
+		    if ( strcmp ( POP_DROP_DIR, POP_MAILDIR ) != 0 )
+			strncpy ( pszDrop, POP_DROP_DIR, iDropLen );
+		    if ( (iDropLen - strlen(pszDrop)) < 
+			 (strlen(pszUser) + strlen(POP_DROP)) ) { 
+			logit ( fTrace, POP_PRIORITY, HERE,
+				"Insufficient room to generate path to .pop file"
+				" for user %.100s",
+				pszUser );
+			return -1;
+		    }
+		    Qsprintf ( pszDrop + strlen(pszDrop), POP_DROP, pszUser );
+		    break;
+		case GNPH_TMP:    /* tmpxxxx    */
+		    strncat ( pszDrop, ".", iDropLen - strlen(pszDrop) );
+		    strncat ( pszDrop, POP_TMPDROP, iDropLen - strlen(pszDrop) );
+		    break;
+		case GNPH_XMT:    /* xmitxxxx   */
+		    strncat ( pszDrop, ".", iDropLen - strlen(pszDrop) );
+		    strncat ( pszDrop, POP_TMPXMIT, iDropLen - strlen(pszDrop)) ;
+		    break;
+		case GNPH_OLDPOP: /* old .pop file (always in POP_MAILDIR) */
+		    strncpy ( pszDrop, POP_MAILDIR, iDropLen );
+		    strncat ( pszDrop, "/",         iDropLen - strlen(pszDrop) );
+		    if ( (iDropLen - strlen(pszDrop)) < 
+			 (strlen(pszUser) + strlen(POP_DROP)) ) { 
+			logit ( fTrace, POP_PRIORITY, HERE,
+				"Insufficient room to generate path to .pop file"
+				" for user %.100s",
+				pszUser );
+			return -1;
+		    }
+		    Qsprintf ( pszDrop + strlen(pszDrop), POP_DROP, pszUser );
+		    break;
+		case GNPH_PATH:  /* Just the path, M'am */
+		    pszDrop [ strlen(pszDrop) -1 ] = '\0';
+		    break;
+		default:
+		    logit ( fTrace, POP_PRIORITY, HERE,
+			    "Bad iWhich passed to genpath: %d",
+			    (int)iWhich );
+		    return -1;
+		    break;
+	    }
+    } else {
+	    if ( iWhich == GNPH_POP )
+		strncpy ( pszDrop, POP_DROP_DIR, iDropLen );
+	    else
+		strncpy ( pszDrop, POP_MAILDIR, iDropLen );
+	    strncat ( pszDrop, "/", iDropLen - strlen(pszDrop) );
+	    
+	    switch ( iWhich ) {
+		case GNPH_SPOOL:  /* spool file */
+		    strncat ( pszDrop, pszUser, iDropLen - strlen(pszDrop) );
+		    break;
+		case GNPH_POP:    /* .pop file  */
+		case GNPH_OLDPOP: /* old .pop file (always in POP_MAILDIR) */
+		    if ( (iDropLen - strlen(pszDrop)) < 
+			 (strlen(pszUser) + strlen(POP_DROP)) ) { 
+			logit ( fTrace, POP_PRIORITY, HERE,
+				"Insufficient room to generate path to .pop file"
+				" for user %.100s",
+				pszUser );
+			return -1;
+		    }
+		    Qsprintf ( pszDrop + strlen(pszDrop), POP_DROP, pszUser );
+		    break;
+		case GNPH_TMP:    /* tmpxxxx    */
+		    strncat ( pszDrop, ".", iDropLen - strlen(pszDrop) );
+		    strncat ( pszDrop, POP_TMPDROP, iDropLen - strlen(pszDrop) );
+		    break;
+		case GNPH_XMT:    /* xmitxxxx   */
+		    strncat ( pszDrop, ".", iDropLen - strlen(pszDrop) );
+		    strncat ( pszDrop, POP_TMPXMIT, iDropLen - strlen(pszDrop)) ;
+		    break;
+		case GNPH_PATH:  /* Just the path, M'am */
+		    pszDrop [ strlen(pszDrop) -1 ] = '\0';
+		    break;
+		default:
+		    logit ( fTrace, POP_PRIORITY, HERE,
+			    "Bad iWhich passed to genpath: %d",
+			    (int)iWhich );
+		    return -1;
+		    break;
+	    }
     }
-    strncpy ( pszDrop, pwp->pw_dir, iDropLen );
-    strncat ( pszDrop, "/",         iDropLen - strlen(pszDrop) );
-    
-    switch ( iWhich ) {
-        case GNPH_SPOOL:  /* spool file */
-            strncat ( pszDrop, HOMEDIRMAIL, iDropLen - strlen(pszDrop) );
-            break;
-        case GNPH_POP:    /* .pop file  */
-            if ( strcmp ( POP_DROP_DIR, POP_MAILDIR ) != 0 )
-                strncpy ( pszDrop, POP_DROP_DIR, iDropLen );
-            if ( (iDropLen - strlen(pszDrop)) < 
-                 (strlen(pszUser) + strlen(POP_DROP)) ) { 
-                logit ( fTrace, POP_PRIORITY, HERE,
-                        "Insufficient room to generate path to .pop file"
-                        " for user %.100s",
-                        pszUser );
-                return -1;
-            }
-            Qsprintf ( pszDrop + strlen(pszDrop), POP_DROP, pszUser );
-            break;
-        case GNPH_TMP:    /* tmpxxxx    */
-            strncat ( pszDrop, ".", iDropLen - strlen(pszDrop) );
-            strncat ( pszDrop, POP_TMPDROP, iDropLen - strlen(pszDrop) );
-            break;
-        case GNPH_XMT:    /* xmitxxxx   */
-            strncat ( pszDrop, ".", iDropLen - strlen(pszDrop) );
-            strncat ( pszDrop, POP_TMPXMIT, iDropLen - strlen(pszDrop)) ;
-            break;
-        case GNPH_OLDPOP: /* old .pop file (always in POP_MAILDIR) */
-            strncpy ( pszDrop, POP_MAILDIR, iDropLen );
-            strncat ( pszDrop, "/",         iDropLen - strlen(pszDrop) );
-            if ( (iDropLen - strlen(pszDrop)) < 
-                 (strlen(pszUser) + strlen(POP_DROP)) ) { 
-                logit ( fTrace, POP_PRIORITY, HERE,
-                        "Insufficient room to generate path to .pop file"
-                        " for user %.100s",
-                        pszUser );
-                return -1;
-            }
-            Qsprintf ( pszDrop + strlen(pszDrop), POP_DROP, pszUser );
-            break;
-        case GNPH_PATH:  /* Just the path, M'am */
-            pszDrop [ strlen(pszDrop) -1 ] = '\0';
-            break;
-        default:
-            logit ( fTrace, POP_PRIORITY, HERE,
-                    "Bad iWhich passed to genpath: %d",
-                    (int)iWhich );
-            return -1;
-            break;
-    }
-    
-#else
-    if ( iWhich == GNPH_POP )
-        strncpy ( pszDrop, POP_DROP_DIR, iDropLen );
-    else
-        strncpy ( pszDrop, POP_MAILDIR, iDropLen );
-    strncat ( pszDrop, "/", iDropLen - strlen(pszDrop) );
-    
-    switch ( iWhich ) {
-        case GNPH_SPOOL:  /* spool file */
-            strncat ( pszDrop, pszUser, iDropLen - strlen(pszDrop) );
-            break;
-        case GNPH_POP:    /* .pop file  */
-        case GNPH_OLDPOP: /* old .pop file (always in POP_MAILDIR) */
-            if ( (iDropLen - strlen(pszDrop)) < 
-                 (strlen(pszUser) + strlen(POP_DROP)) ) { 
-                logit ( fTrace, POP_PRIORITY, HERE,
-                        "Insufficient room to generate path to .pop file"
-                        " for user %.100s",
-                        pszUser );
-                return -1;
-            }
-            Qsprintf ( pszDrop + strlen(pszDrop), POP_DROP, pszUser );
-            break;
-        case GNPH_TMP:    /* tmpxxxx    */
-            strncat ( pszDrop, ".", iDropLen - strlen(pszDrop) );
-            strncat ( pszDrop, POP_TMPDROP, iDropLen - strlen(pszDrop) );
-            break;
-        case GNPH_XMT:    /* xmitxxxx   */
-            strncat ( pszDrop, ".", iDropLen - strlen(pszDrop) );
-            strncat ( pszDrop, POP_TMPXMIT, iDropLen - strlen(pszDrop)) ;
-            break;
-        case GNPH_PATH:  /* Just the path, M'am */
-            pszDrop [ strlen(pszDrop) -1 ] = '\0';
-            break;
-        default:
-            logit ( fTrace, POP_PRIORITY, HERE,
-                    "Bad iWhich passed to genpath: %d",
-                    (int)iWhich );
-            return -1;
-            break;
-    }
-    
-#endif
 
     if ( DEBUGGING && bDebugging ) {
         logit ( fTrace, POP_DEBUG, HERE,
diff -ur qpopper3.0.2.orig/man/popper.8 qpopper3.0.2/man/popper.8
--- qpopper3.0.2.orig/man/popper.8	Wed May 10 00:35:13 2000
+++ qpopper3.0.2/man/popper.8	Sat May 27 04:09:33 2000
@@ -17,12 +17,13 @@
 .SH NAME
 qpopper \-\- pop 3 server (v3.0)
 .SH SYNOPSIS
-.B /usr/local/lib/popper
+.B /usr/sbin/qpopper
 [ -b buildir ]
 [ -c ]
 [ -d ]
 [ -e login_delay=nn,expire=nn ]
 [ -k ]
+[ -m [Mailbox] ]
 [ -R ]
 [ -s ]
 [ -t trace-file ]
@@ -74,6 +75,10 @@
 retention at all) by using the --enable-auto-delete flag with ./configure.  This
 causes messages to be automatically deleted after they are downloaded.
 
+.TP
+.B -m [Mailbox]
+Indicates that mail is stored in users $HOME directory, you can
+specify where (relative to $HOME) the mail is.
 .TP
 .B \-R
 Disables reverse lookups on client IP addresses.
diff -ur qpopper3.0.2.orig/popper/pop_init.c qpopper3.0.2/popper/pop_init.c
--- qpopper3.0.2.orig/popper/pop_init.c	Wed May 10 00:35:20 2000
+++ qpopper3.0.2/popper/pop_init.c	Sat May 27 04:09:33 2000
@@ -228,7 +228,7 @@
     /*  
      * Process command line arguments 
      */
-    while ( ( c = getopt ( argcount, argmessage, "cdkst:T:b:e:R") ) != EOF )
+    while ( ( c = getopt ( argcount, argmessage, "cdkst:T:b:e:Rm::") ) != EOF )
         switch (c) {
 
         /*  
@@ -307,6 +307,14 @@
             pop_timeout = atoi(optarg);
             DEBUG_LOG1(p, "timeout = %i", pop_timeout);
             break;
+
+	    /* ~/Mailbox */
+	case 'm':
+	    if ( optarg )
+		pop_homedirmail = optarg;
+	    else
+		pop_homedirmail = "Mailbox";
+ 	    break;
 
             /*  Unknown option received */
         default:
diff -ur qpopper3.0.2.orig/popper/popper.c qpopper3.0.2/popper/popper.c
--- qpopper3.0.2.orig/popper/popper.c	Wed May 10 00:35:22 2000
+++ qpopper3.0.2/popper/popper.c	Sat May 27 04:09:33 2000
@@ -80,6 +80,7 @@
 
 extern  state_table *   pop_get_command();
 int poptimeout = 0;
+char	*pop_homedirmail = NULL;
 
 volatile int hangup = FALSE;
 
diff -ur qpopper3.0.2.orig/popper/popper.h qpopper3.0.2/popper/popper.h
--- qpopper3.0.2.orig/popper/popper.h	Wed May 10 00:35:22 2000
+++ qpopper3.0.2/popper/popper.h	Sat May 27 04:09:34 2000
@@ -208,6 +208,7 @@
 #endif /* not BSD >= 199306 and not __USE_BSD */
 
 extern int               pop_timeout;
+extern char		*pop_homedirmail;
 
 extern volatile int      hangup;
 
